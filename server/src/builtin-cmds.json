{
  "add_compile_definitions": {
    "sig": [
      "add_compile_definitions(<definition> ...)"
    ]
  },
  "add_compile_options": {
    "sig": [
      "add_compile_options(<option> ...)"
    ]
  },
  "add_custom_command": {
    "sig": [
      "add_custom_command(OUTPUT output1 [output2 ...] COMMAND command1 [ARGS] [args1...] [COMMAND command2 [ARGS] [args2...] ...] [MAIN_DEPENDENCY depend] [DEPENDS [depends...]] [BYPRODUCTS [files...]] [IMPLICIT_DEPENDS <lang1> depend1 [<lang2> depend2] ...] [WORKING_DIRECTORY dir] [COMMENT comment] [DEPFILE depfile] [JOB_POOL job_pool] [VERBATIM] [APPEND] [USES_TERMINAL] [COMMAND_EXPAND_LISTS] [DEPENDS_EXPLICIT_ONLY])",
      "add_custom_command(TARGET <target> PRE_BUILD | PRE_LINK | POST_BUILD COMMAND command1 [ARGS] [args1...] [COMMAND command2 [ARGS] [args2...] ...] [BYPRODUCTS [files...]] [WORKING_DIRECTORY dir] [COMMENT comment] [VERBATIM] [USES_TERMINAL] [COMMAND_EXPAND_LISTS])"
    ],
    "keyword": ["OUTPUT", "COMMAND", "ARGS", "MAIN_DEPENDENCY", "DEPENDS", "BYPRODUCTS", "IMPLICIT_DEPENDS", "WORKING_DIRECTORY", "COMMENT", "DEPFILE", "JOB_POOL", "VERBATIM", "APPEND", "USES_TERMINAL", "COMMAND_EXPAND_LISTS", "DEPENDS_EXPLICIT_ONLY", "TARGET", "PRE_BUILD", "PRE_LINK", "POST_BUILD"]
  },
  "add_custom_target": {
    "sig": [
      "add_custom_target(Name [ALL] [command1 [args1...]] [COMMAND command2 [args2...] ...] [DEPENDS depend depend depend ... ] [BYPRODUCTS [files...]] [WORKING_DIRECTORY dir] [COMMENT comment] [JOB_POOL job_pool] [VERBATIM] [USES_TERMINAL] [COMMAND_EXPAND_LISTS] [SOURCES src1 [src2...]])"
    ],
    "keyword": ["ALL", "COMMAND", "DEPENDS", "BYPRODUCTS", "WORKING_DIRECTORY", "COMMENT", "JOB_POOL", "VERBATIM", "USES_TERMINAL", "COMMAND_EXPAND_LISTS", "SOURCES"]
  },
  "add_definitions": {
    "sig": [
      "add_definitions(-DFOO -DBAR ...)"
    ]
  },
  "add_dependencies": {
    "sig": [
      "add_dependencies(<target> [<target-dependency>]...)"
    ]
  },
  "add_executable": {
    "sig": [
      "add_executable(<name> [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [source1] [source2 ...])",
      "add_executable(<name> IMPORTED [GLOBAL])",
      "add_executable(<name> ALIAS <target>)"
    ],
    "keyword": ["WIN32", "MACOSX_BUNDLE", "EXCLUDE_FROM_ALL", "IMPORTED", "GLOBAL", "ALIAS"]
  },
  "add_library": {
    "sig": [
      "add_library(<name> [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [<source>...])",
      "add_library(<name> OBJECT [<source>...])",
      "add_library(<name> INTERFACE [<source>...] [EXCLUDE_FROM_ALL])",
      "add_library(<name> { STATIC | SHARED | MODULE | UNKNOWN | OBJECT | INTERFACE } IMPORTED [GLOBAL])",
      "add_library(<name> ALIAS <target>)"
    ],
    "keyword": ["STATIC", "SHARED", "MODULE", "EXCLUDE_FROM_ALL", "OBJECT", "INTERFACE", "IMPORTED", "GLOBAL", "ALIAS", "UNKNOWN"]
  },
  "add_link_options": {
    "sig": [
      "add_link_options(<option> ...)"
    ]
  },
  "add_subdirectory": {
    "sig": [
      "add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL] [SYSTEM])"
    ],
    "keyword": ["EXCLUDE_FROM_ALL", "SYSTEM"]
  },
  "add_test": {
    "sig": [
      "add_test(NAME <name> COMMAND <command> [<arg>...] [CONFIGURATIONS <config>...] [WORKING_DIRECTORY <dir>] [COMMAND_EXPAND_LISTS])",
      "add_test(<name> <command> [<arg>...])"
    ],
    "keyword": ["NAME", "COMMAND", "CONFIGURATIONS", "WORKING_DIRECTORY", "COMMAND_EXPAND_LISTS"]
  },
  "aux_source_directory": {
    "sig": [
      "aux_source_directory(<dir> <variable>)"
    ]
  },
  "block": {
    "sig": [
      "block([SCOPE_FOR [POLICIES] [VARIABLES] ] [PROPAGATE <var-name>...])",
      "block(SCOPE_FOR VARIABLES POLICIES)",
      "block(PROPAGATE var1 var2)",
      "block()"
    ],
    "keyword": ["SCOPE_FOR", "POLICIES", "VARIABLES", "PROPAGATE"]
  },
  "break": {
    "sig": [
      "break()"
    ]
  },
  "build_command": {
    "sig": [
      "build_command(<variable> [CONFIGURATION <config>] [PARALLEL_LEVEL <parallel>] [TARGET <target>] [PROJECT_NAME <projname>])",
      "build_command(<cachevariable> <makecommand>)"
    ],
    "keyword": ["CONFIGURATION", "PARALLEL_LEVEL", "TARGET", "PROJECT_NAME"]
  },
  "build_name": {
    "sig": [
      "build_name(variable)"
    ],
    "deprecated": true
  },
  "cmake_file_api": {
    "sig": [
      "cmake_file_api(QUERY API_VERSION <version> [CODEMODEL <versions>...] [CACHE <versions>...] [CMAKEFILES <versions>...] [TOOLCHAINS <versions>...])"
    ],
    "keyword": ["QUERY", "API_VERSION", "CODEMODEL", "CACHE", "CMAKEFILES", "TOOLCHAINS"]
  },
  "cmake_host_system_information": {
    "sig": [
      "cmake_host_system_information(RESULT <variable> QUERY <key> [NUMBER_OF_LOGICAL_CORES|NUMBER_OF_PHYSICAL_CORES|HOSTNAME|FQDN|TOTAL_VIRTUAL_MEMORY|AVAILABLE_VIRTUAL_MEMORY|TOTAL_PHYSICAL_MEMORY|AVAILABLE_PHYSICAL_MEMORY|IS_64BIT|HAS_FPU|HAS_MMX|HAS_MMX_PLUS|HAS_SSE|HAS_SSE2|HAS_SSE_FP|HAS_SSE_MMX|HAS_AMD_3DNOW|HAS_AMD_3DNOW_PLUS|HAS_IA64|HAS_SERIAL_NUMBER|PROCESSOR_SERIAL_NUMBER|PROCESSOR_NAME|PROCESSOR_DESCRIPTION|OS_NAME|OS_RELEASE|OS_VERSION|OS_PLATFORM|MSYSTEM_PREFIX|DISTRIB_INFO|64|32|64_32|32_64|HOST|TARGET|BOTH]...)",
      "cmake_host_system_information(RESULT <variable> QUERY WINDOWS_REGISTRY <key> [VALUE_NAMES|SUBKEYS|VALUE <name>] [VIEW <views>] [SEPARATOR <separator>] [ERROR_VARIABLE <result>])"
    ],
    "keyword": ["RESULT", "QUERY",  "WINDOWS_REGISTRY", "VALUE_NAMES", "SUBKEYS", "VALUE", "VIEW", "SEPARATOR", "ERROR_VARIABLE", "NUMBER_OF_LOGICAL_CORES", "NUMBER_OF_PHYSICAL_CORES", "HOSTNAME", "FQDN", "TOTAL_VIRTUAL_MEMORY", "AVAILABLE_VIRTUAL_MEMORY", "TOTAL_PHYSICAL_MEMORY", "AVAILABLE_PHYSICAL_MEMORY", "IS_64BIT", "HAS_FPU", "HAS_MMX", "HAS_MMX_PLUS", "HAS_SSE", "HAS_SSE2", "HAS_SSE_FP", "HAS_SSE_MMX", "HAS_AMD_3DNOW", "HAS_AMD_3DNOW_PLUS", "HAS_IA64", "HAS_SERIAL_NUMBER", "PROCESSOR_SERIAL_NUMBER", "PROCESSOR_NAME", "PROCESSOR_DESCRIPTION", "OS_NAME", "OS_RELEASE", "OS_VERSION", "OS_PLATFORM", "MSYSTEM_PREFIX", "DISTRIB_INFO", "64", "32", "64_32", "32_64", "HOST", "TARGET", "BOTH"]
  },
  "cmake_language": {
    "sig": [
      "cmake_language(CALL <command> [<arg>...])",
      "cmake_language(EVAL CODE <code>...)",
      "cmake_language(DEFER { DIRECTORY <dir> | ID <id> | ID_VAR <var> } ... CALL <command> [<arg>...])",
      "cmake_language(DEFER [DIRECTORY <dir>] GET_CALL_IDS <var>)",
      "cmake_language(DEFER [DIRECTORY <dir>] GET_CALL <id> <var>)",
      "cmake_language(DEFER [DIRECTORY <dir>] CANCEL_CALL <id>...)",
      "cmake_language(SET_DEPENDENCY_PROVIDER <command> SUPPORTED_METHODS { FIND_PACKAGE | FETCHCONTENT_MAKEAVAILABLE_SERIAL } ...)",
      "cmake_language(GET_MESSAGE_LOG_LEVEL <out-var>)"
    ],
    "keyword": ["CALL", "EVAL", "DEFER", "DIRECTORY", "ID", "ID_VAR", "CODE", "GET_CALL_IDS", "GET_CALL", "CANCEL_CALL", "SET_DEPENDENCY_PROVIDER", "SUPPORTED_METHODS", "FIND_PACKAGE", "FETCHCONTENT_MAKEAVAILABLE_SERIAL", "GET_MESSAGE_LOG_LEVEL"]
  },
  "cmake_minimum_required": {
    "sig": [
      "cmake_minimum_required(VERSION <min>[...<policy_max>] [FATAL_ERROR])"
    ],
    "keyword": ["VERSION", "FATAL_ERROR"]
  },
  "cmake_parse_arguments": {
    "sig": [
      "cmake_parse_arguments(<prefix> <options> <one_value_keywords> <multi_value_keywords> <args>...)",
      "cmake_parse_arguments(PARSE_ARGV <N> <prefix> <options> <one_value_keywords> <multi_value_keywords>)"
    ],
    "keyword": ["PARSE_ARGV"]
  },
  "cmake_path": {
    "sig": [
      "cmake_path(GET <path-var> ROOT_NAME <out-var>)",
      "cmake_path(GET <path-var> ROOT_DIRECTORY <out-var>)",
      "cmake_path(GET <path-var> ROOT_PATH <out-var>)",
      "cmake_path(GET <path-var> FILENAME <out-var>)",
      "cmake_path(GET <path-var> EXTENSION [LAST_ONLY] <out-var>)",
      "cmake_path(GET <path-var> STEM [LAST_ONLY] <out-var>)",
      "cmake_path(GET <path-var> RELATIVE_PART <out-var>)",
      "cmake_path(GET <path-var> PARENT_PATH <out-var>)",
      "cmake_path(HAS_ROOT_NAME <path-var> <out-var>)",
      "cmake_path(HAS_ROOT_DIRECTORY <path-var> <out-var>)",
      "cmake_path(HAS_ROOT_PATH <path-var> <out-var>)",
      "cmake_path(HAS_FILENAME <path-var> <out-var>)",
      "cmake_path(HAS_EXTENSION <path-var> <out-var>)",
      "cmake_path(HAS_STEM <path-var> <out-var>)",
      "cmake_path(HAS_RELATIVE_PART <path-var> <out-var>)",
      "cmake_path(HAS_PARENT_PATH <path-var> <out-var>)",
      "cmake_path(IS_ABSOLUTE <path-var> <out-var>)",
      "cmake_path(IS_RELATIVE <path-var> <out-var>)",
      "cmake_path(IS_PREFIX <path-var> <input> [NORMALIZE] <out-var>)",
      "cmake_path(COMPARE <input1> EQUAL <input2> <out-var>)",
      "cmake_path(COMPARE <input1> NOT_EQUAL <input2> <out-var>)",
      "cmake_path(SET <path-var> [NORMALIZE] <input>)",
      "cmake_path(APPEND <path-var> [<input>...] [OUTPUT_VARIABLE <out-var>])",
      "cmake_path(APPEND_STRING <path-var> [<input>...] [OUTPUT_VARIABLE <out-var>])",
      "cmake_path(REMOVE_FILENAME <path-var> [OUTPUT_VARIABLE <out-var>])",
      "cmake_path(REPLACE_FILENAME <path-var> <input> [OUTPUT_VARIABLE <out-var>])",
      "cmake_path(REMOVE_EXTENSION <path-var> [LAST_ONLY] [OUTPUT_VARIABLE <out-var>])",
      "cmake_path(REPLACE_EXTENSION <path-var> [LAST_ONLY] <input> [OUTPUT_VARIABLE <out-var>])",
      "cmake_path(NORMAL_PATH <path-var> [OUTPUT_VARIABLE <out-var>])",
      "cmake_path(RELATIVE_PATH <path-var> [BASE_DIRECTORY <input>] [OUTPUT_VARIABLE <out-var>])",
      "cmake_path(ABSOLUTE_PATH <path-var> [BASE_DIRECTORY <input>] [NORMALIZE] [OUTPUT_VARIABLE <out-var>])",
      "cmake_path(NATIVE_PATH <path-var> [NORMALIZE] <out-var>)",
      "cmake_path(CONVERT <input> TO_CMAKE_PATH_LIST <out-var> [NORMALIZE])",
      "cmake_path(CONVERT <input> TO_NATIVE_PATH_LIST <out-var> [NORMALIZE])",
      "cmake_path(HASH <path-var> <out-var>)"
    ],
    "keyword": ["GET", "ROOT_NAME", "ROOT_DIRECTORY", "ROOT_PATH", "FILENAME", "EXTENSION", "LAST_ONLY", "STEM", "RELATIVE_PART", "PARENT_PATH", "HAS_ROOT_NAME", "HAS_ROOT_DIRECTORY", "HAS_ROOT_PATH", "HAS_FILENAME", "HAS_EXTENSION", "HAS_STEM", "HAS_RELATIVE_PART", "HAS_PARENT_PATH", "IS_ABSOLUTE", "IS_RELATIVE", "IS_PREFIX", "COMPARE", "EQUAL", "NOT_EQUAL", "SET", "APPEND", "OUTPUT_VARIABLE", "APPEND_STRING", "REMOVE_FILENAME", "REPLACE_FILENAME", "REMOVE_EXTENSION", "REPLACE_EXTENSION", "NORMAL_PATH", "RELATIVE_PATH", "ABSOLUTE_PATH", "NATIVE_PATH", "CONVERT", "TO_CMAKE_PATH_LIST", "TO_NATIVE_PATH_LIST", "HASH", "NORMALIZE", "BASE_DIRECTORY"]
  },
  "cmake_pkg_config": {
    "sig": [
      "cmake_pkg_config(EXTRACT <package> [<version>] [REQUIRED] [EXACT] [QUIET] [STRICTNESS <mode>] [ENV_MODE <mode>] [PC_LIBDIR <path>...] [PC_PATH <path>...] [DISABLE_UNINSTALLED <bool>] [PC_SYSROOT_DIR <path>] [TOP_BUILD_DIR <path>] [SYSTEM_INCLUDE_DIRS <path>...] [SYSTEM_LIBRARY_DIRS <path>...] [ALLOW_SYSTEM_INCLUDES <bool>] [ALLOW_SYSTEM_LIBS <bool>])"
    ],
    "keyword": ["EXTRACT", "REQUIRED", "EXACT", "QUIET", "STRICTNESS", "ENV_MODE", "PC_LIBDIR", "PC_PATH", "DISABLE_UNINSTALLED", "PC_SYSROOT_DIR", "TOP_BUILD_DIR", "SYSTEM_INCLUDE_DIRS", "SYSTEM_LIBRARY_DIRS", "ALLOW_SYSTEM_INCLUDES", "ALLOW_SYSTEM_LIBS"]
  },
  "cmake_policy": {
    "sig": [
      "cmake_policy(VERSION <min>[...<max>])",
      "cmake_policy(SET CMP<NNNN> NEW)",
      "cmake_policy(SET CMP<NNNN> OLD)",
      "cmake_policy(GET CMP<NNNN> <variable>)",
      "cmake_policy(PUSH)",
      "cmake_policy(POP)"
    ],
    "keyword": ["VERSION", "SET", "NEW", "OLD", "GET", "PUSH", "POP"]
  },
  "configure_file": {
    "sig": [
      "configure_file(<input> <output> [NO_SOURCE_PERMISSIONS | USE_SOURCE_PERMISSIONS | FILE_PERMISSIONS <permissions>...] [COPYONLY] [ESCAPE_QUOTES] [@ONLY] [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF] ])"
    ],
    "keyword": ["NO_SOURCE_PERMISSIONS", "USE_SOURCE_PERMISSIONS", "FILE_PERMISSIONS", "COPYONLY", "ESCAPE_QUOTES", "@ONLY", "NEWLINE_STYLE", "UNIX", "DOS", "WIN32", "LF", "CRLF"]
  },
  "continue": {
    "sig": [
      "continue()"
    ]
  },
  "create_test_sourcelist": {
    "sig": [
      "create_test_sourcelist(sourceListName driverName test1 test2 test3 EXTRA_INCLUDE include.h FUNCTION function)"
    ],
    "keyword": ["EXTRA_INCLUDE", "FUNCTION"]
  },
  "ctest_build": {
    "sig": [
      "ctest_build([BUILD <build-dir>] [APPEND] [CONFIGURATION <config>] [PARALLEL_LEVEL <parallel>] [FLAGS <flags>] [PROJECT_NAME <project-name>] [TARGET <target-name>] [NUMBER_ERRORS <num-err-var>] [NUMBER_WARNINGS <num-warn-var>] [RETURN_VALUE <result-var>] [CAPTURE_CMAKE_ERROR <result-var>])"
    ],
    "keyword": ["BUILD", "APPEND", "CONFIGURATION", "PARALLEL_LEVEL", "FLAGS", "PROJECT_NAME", "TARGET", "NUMBER_ERRORS", "NUMBER_WARNINGS", "RETURN_VALUE", "CAPTURE_CMAKE_ERROR"]
  },
  "ctest_configure": {
    "sig": [
      "ctest_configure([BUILD <build-dir>] [SOURCE <source-dir>] [APPEND] [OPTIONS <options>] [RETURN_VALUE <result-var>] [QUIET] [CAPTURE_CMAKE_ERROR <result-var>])"
    ],
    "keyword": ["BUILD", "SOURCE", "APPEND", "OPTIONS", "RETURN_VALUE", "QUIET", "CAPTURE_CMAKE_ERROR"]
  },
  "ctest_coverage": {
    "sig": [
      "ctest_coverage([BUILD <build-dir>] [APPEND] [LABELS <label>...] [RETURN_VALUE <result-var>] [CAPTURE_CMAKE_ERROR <result-var>] [QUIET])"
    ],
    "keyword": ["BUILD", "APPEND", "LABELS", "RETURN_VALUE", "CAPTURE_CMAKE_ERROR", "QUIET"]
  },
  "ctest_empty_binary_directory": {
    "sig": [
      "ctest_empty_binary_directory( directory )"
    ]
  },
  "ctest_memcheck": {
    "sig": [
      "ctest_memcheck([BUILD <build-dir>] [APPEND] [START <start-number>] [END <end-number>] [STRIDE <stride-number>] [EXCLUDE <exclude-regex>] [INCLUDE <include-regex>] [EXCLUDE_LABEL <label-exclude-regex>] [INCLUDE_LABEL <label-include-regex>] [EXCLUDE_FIXTURE <regex>] [EXCLUDE_FIXTURE_SETUP <regex>] [EXCLUDE_FIXTURE_CLEANUP <regex>] [PARALLEL_LEVEL <level>] [RESOURCE_SPEC_FILE <file>] [TEST_LOAD <threshold>] [SCHEDULE_RANDOM <ON|OFF>] [STOP_ON_FAILURE] [STOP_TIME <time-of-day>] [RETURN_VALUE <result-var>] [CAPTURE_CMAKE_ERROR <result-var>] [REPEAT <mode>:<n>] [OUTPUT_JUNIT <file>] [DEFECT_COUNT <defect-count-var>] [QUIET])"
    ],
    "keyword": ["BUILD", "APPEND", "START", "END", "STRIDE", "EXCLUDE", "INCLUDE", "EXCLUDE_LABEL", "INCLUDE_LABEL", "EXCLUDE_FIXTURE", "EXCLUDE_FIXTURE_SETUP", "EXCLUDE_FIXTURE_CLEANUP", "PARALLEL_LEVEL", "RESOURCE_SPEC_FILE", "TEST_LOAD", "SCHEDULE_RANDOM", "STOP_ON_FAILURE", "STOP_TIME", "RETURN_VALUE", "CAPTURE_CMAKE_ERROR", "REPEAT", "OUTPUT_JUNIT", "DEFECT_COUNT", "QUIET", "ON", "OFF"]
  },
  "ctest_read_custom_files": {
    "sig": [
      "ctest_read_custom_files(directory ... )"
    ]
  },
  "ctest_run_script": {
    "sig": [
      "ctest_run_script([NEW_PROCESS] script_file_name script_file_name1 script_file_name2 ... [RETURN_VALUE var])"
    ],
    "keyword": ["NEW_PROCESS", "RETURN_VALUE"]
  },
  "ctest_sleep": {
    "sig": [
      "ctest_sleep(<seconds>)",
      "ctest_sleep(<time1> <duration> <time2>)"
    ]
  },
  "ctest_start": {
    "sig": [
      "ctest_start(<model> [<source> [<binary>]] [GROUP <group>] [QUIET])",
      "ctest_start([<model> [<source> [<binary>]]] [GROUP <group>] APPEND [QUIET])"
    ],
    "keyword": ["GROUP", "APPEND", "QUIET"]
  },
  "ctest_submit": {
    "sig": [
      "ctest_submit([PARTS <part>...] [FILES <file>...] [SUBMIT_URL <url>] [BUILD_ID <result-var>] [HTTPHEADER <header>] [RETRY_COUNT <count>] [RETRY_DELAY <delay>] [RETURN_VALUE <result-var>] [CAPTURE_CMAKE_ERROR <result-var>] [QUIET])",
      "ctest_submit(CDASH_UPLOAD <file> [CDASH_UPLOAD_TYPE <type>] [SUBMIT_URL <url>] [BUILD_ID <result-var>] [HTTPHEADER <header>] [RETRY_COUNT <count>] [RETRY_DELAY <delay>] [RETURN_VALUE <result-var>] [QUIET])"
    ],
    "keyword": ["PARTS", "FILES", "SUBMIT_URL", "BUILD_ID", "HTTPHEADER", "RETRY_COUNT", "RETRY_DELAY", "RETURN_VALUE", "CAPTURE_CMAKE_ERROR", "QUIET", "CDASH_UPLOAD", "CDASH_UPLOAD_TYPE"]
  },
  "ctest_test": {
    "sig": [
      "ctest_test([BUILD <build-dir>] [APPEND] [START <start-number>] [END <end-number>] [STRIDE <stride-number>] [EXCLUDE <exclude-regex>] [INCLUDE <include-regex>] [EXCLUDE_LABEL <label-exclude-regex>] [INCLUDE_LABEL <label-include-regex>] [EXCLUDE_FIXTURE <regex>] [EXCLUDE_FIXTURE_SETUP <regex>] [EXCLUDE_FIXTURE_CLEANUP <regex>] [PARALLEL_LEVEL <level>] [RESOURCE_SPEC_FILE <file>] [TEST_LOAD <threshold>] [SCHEDULE_RANDOM <ON|OFF>] [STOP_ON_FAILURE] [STOP_TIME <time-of-day>] [RETURN_VALUE <result-var>] [CAPTURE_CMAKE_ERROR <result-var>] [REPEAT <mode>:<n>] [OUTPUT_JUNIT <file>] [QUIET])"
    ],
    "keyword": ["BUILD", "APPEND", "START", "END", "STRIDE", "EXCLUDE", "INCLUDE", "EXCLUDE_LABEL", "INCLUDE_LABEL", "EXCLUDE_FIXTURE", "EXCLUDE_FIXTURE_SETUP", "EXCLUDE_FIXTURE_CLEANUP", "PARALLEL_LEVEL", "RESOURCE_SPEC_FILE", "TEST_LOAD", "SCHEDULE_RANDOM", "STOP_ON_FAILURE", "STOP_TIME", "RETURN_VALUE", "CAPTURE_CMAKE_ERROR", "REPEAT", "OUTPUT_JUNIT", "QUIET", "ON", "OFF"]
  },
  "ctest_update": {
    "sig": [
      "ctest_update([SOURCE <source-dir>] [RETURN_VALUE <result-var>] [CAPTURE_CMAKE_ERROR <result-var>] [QUIET])"
    ],
    "keyword": ["SOURCE", "RETURN_VALUE", "CAPTURE_CMAKE_ERROR", "QUIET"]
  },
  "ctest_upload": {
    "sig": [
      "ctest_upload(FILES <file>... [QUIET] [CAPTURE_CMAKE_ERROR <result-var>])"
    ],
    "keyword": ["FILES", "QUIET", "CAPTURE_CMAKE_ERROR"]
  },
  "define_property": {
    "sig": [
      "define_property(<GLOBAL | DIRECTORY | TARGET | SOURCE | TEST | VARIABLE | CACHED_VARIABLE> PROPERTY <name> [INHERITED] BRIEF_DOCS <brief-doc> [docs...] FULL_DOCS <full-doc> [docs...])"
    ],
    "keyword": ["GLOBAL", "DIRECTORY", "TARGET", "SOURCE", "TEST", "VARIABLE", "CACHED_VARIABLE", "PROPERTY", "INHERITED", "BRIEF_DOCS", "FULL_DOCS"]
  },
  "else": {
    "sig": [
      "else([<condition>])"
    ]
  },
  "elseif": {
    "sig": [
      "elseif(<condition>)",
      "elseif(<constant>)",
      "elseif(<variable|string>)",
      "elseif([NOT] <condition> { <variable> | COMMAND <command-name> | POLICY <policy-id> | TARGET <target_name> | TEST <test-name>})",
      "elseif(<cond1> AND <cond2>)",
      "elseif(<cond1> OR <cond2>)",
      "elseif(DEFINED <name>|CACHE{<name>}|ENV{<name>})",
      "elseif(<variable|string> IN_LIST <variable>)",
      "elseif(<variable|string> MATCHES regex)",
      "elseif(<variable|string> LESS <variable|string>)",
      "elseif(<variable|string> GREATER <variable|string>)",
      "elseif(<variable|string> EQUAL <variable|string>)",
      "elseif(<variable|string> LESS_EQUAL <variable|string>)",
      "elseif(<variable|string> GREATER_EQUAL <variable|string>)",
      "elseif(<variable|string> STRLESS <variable|string>)",
      "elseif(<variable|string> STRGREATER <variable|string>)",
      "elseif(<variable|string> STREQUAL <variable|string>)",
      "elseif(<variable|string> STRLESS_EQUAL <variable|string>)",
      "elseif(<variable|string> STRGREATER_EQUAL <variable|string>)",
      "elseif(<variable|string> VERSION_LESS <variable|string>)",
      "elseif(<variable|string> VERSION_GREATER <variable|string>)",
      "elseif(<variable|string> VERSION_EQUAL <variable|string>)",
      "elseif(<variable|string> VERSION_LESS_EQUAL <variable|string>)",
      "elseif(<variable|string> VERSION_GREATER_EQUAL <variable|string>)",
      "elseif(var1)"
    ],
    "keyword": ["NOT", "AND", "OR", "DEFINED", "CACHE", "ENV", "IN_LIST", "MATCHES", "LESS", "GREATER", "EQUAL", "LESS_EQUAL", "GREATER_EQUAL", "STRLESS", "STRGREATER", "STREQUAL", "STRLESS_EQUAL", "STRGREATER_EQUAL", "VERSION_LESS", "VERSION_GREATER", "VERSION_EQUAL", "VERSION_LESS_EQUAL", "VERSION_GREATER_EQUAL", "COMMAND", "POLICY", "TARGET", "TEST"]
  },
  "enable_language": {
    "sig": [
      "enable_language({CXX|C|CUDA|OBJC|OBJCXX|`Fortran`|HIP|ISPC|ASM} [OPTIONAL] )"
    ],
    "keyword": ["CXX", "C", "CUDA", "OBJC", "OBJCXX", "Fortran", "HIP", "ISPC", "ASM", "OPTIONAL"]
  },
  "enable_testing": {
    "sig": [
      "enable_testing()"
    ]
  },
  "endblock": {
    "sig": [
      "endblock()"
    ]
  },
  "endforeach": {
    "sig": [
      "endforeach([<loop_var>])"
    ]
  },
  "endfunction": {
    "sig": [
      "endfunction([<name>])"
    ]
  },
  "endif": {
    "sig": [
      "endif([<condition>])"
    ]
  },
  "endmacro": {
    "sig": [
      "endmacro([<name>])"
    ]
  },
  "endwhile": {
    "sig": [
      "endwhile([<condition>])"
    ]
  },
  "exec_program": {
    "sig": [
      "exec_program(Executable [directory in which to run] [ARGS <arguments to executable>] [OUTPUT_VARIABLE <var>] [RETURN_VALUE <var>])"
    ],
    "keyword": ["ARGS", "OUTPUT_VARIABLE", "RETURN_VALUE"],
    "deprecated": true
  },
  "execute_process": {
    "sig": [
      "execute_process(COMMAND <cmd1> [<arguments>] [COMMAND <cmd2> [<arguments>]]... [WORKING_DIRECTORY <directory>] [TIMEOUT <seconds>] [RESULT_VARIABLE <variable>] [RESULTS_VARIABLE <variable>] [OUTPUT_VARIABLE <variable>] [ERROR_VARIABLE <variable>] [INPUT_FILE <file>] [OUTPUT_FILE <file>] [ERROR_FILE <file>] [OUTPUT_QUIET] [ERROR_QUIET] [COMMAND_ECHO <where>] [OUTPUT_STRIP_TRAILING_WHITESPACE] [ERROR_STRIP_TRAILING_WHITESPACE] [ENCODING <name>] [ECHO_OUTPUT_VARIABLE] [ECHO_ERROR_VARIABLE] [COMMAND_ERROR_IS_FATAL <ANY|LAST>])"
    ],
    "keyword": ["COMMAND", "WORKING_DIRECTORY", "TIMEOUT", "RESULT_VARIABLE", "RESULTS_VARIABLE", "OUTPUT_VARIABLE", "ERROR_VARIABLE", "INPUT_FILE", "OUTPUT_FILE", "ERROR_FILE", "OUTPUT_QUIET", "ERROR_QUIET", "COMMAND_ECHO", "OUTPUT_STRIP_TRAILING_WHITESPACE", "ERROR_STRIP_TRAILING_WHITESPACE", "ENCODING", "ECHO_OUTPUT_VARIABLE", "ECHO_ERROR_VARIABLE", "COMMAND_ERROR_IS_FATAL", "ANY", "LAST"]
  },
  "export": {
    "sig": [
      "export(EXPORT <export-name> [NAMESPACE <namespace>] [FILE <filename>])",
      "export(TARGETS [target1 [target2 [...]]] [NAMESPACE <namespace>] [APPEND] FILE <filename> [EXPORT_LINK_INTERFACE_LIBRARIES] [CXX_MODULES_DIRECTORY <directory>])",
      "export(PACKAGE <PackageName>)",
      "export(TARGETS [target1 [target2 [...]]] [ANDROID_MK <filename>])",
      "export(<export-name> [PACKAGE_DEPENDENCY <dep> [ENABLED { TRUE | FALSE | AUTO }] [EXTRA_ARGS <args>...]] [...] [TARGET <target> [XCFRAMEWORK_LOCATION <location>]] [...])"
    ],
    "keyword": ["EXPORT", "NAMESPACE", "FILE", "TARGETS", "APPEND", "EXPORT_LINK_INTERFACE_LIBRARIES", "CXX_MODULES_DIRECTORY", "PACKAGE", "ANDROID_MK", "PACKAGE_DEPENDENCY", "ENABLED", "TRUE", "FALSE", "AUTO", "EXTRA_ARGS", "TARGET", "XCFRAMEWORK_LOCATION"]
  },
  "export_library_dependencies": {
    "sig": [
      "export_library_dependencies(<file> [APPEND])"
    ],
    "deprecated": true,
    "keyword": ["APPEND"]
  },
  "file": {
    "sig": [
      "file(READ <filename> <variable> [OFFSET <offset>] [LIMIT <max-in>] [HEX])",
      "file(STRINGS <filename> <variable> [<options>...])",
      "file(<HASH> <filename> <variable>)",
      "file(TIMESTAMP <filename> <variable> [<format>] [UTC])",
      "file(GET_RUNTIME_DEPENDENCIES [RESOLVED_DEPENDENCIES_VAR <deps_var>] [UNRESOLVED_DEPENDENCIES_VAR <unresolved_deps_var>] [CONFLICTING_DEPENDENCIES_PREFIX <conflicting_deps_prefix>] [EXECUTABLES [<executable_files>...]] [LIBRARIES [<library_files>...]] [MODULES [<module_files>...]] [DIRECTORIES [<directories>...]] [BUNDLE_EXECUTABLE <bundle_executable_file>] [PRE_INCLUDE_REGEXES [<regexes>...]] [PRE_EXCLUDE_REGEXES [<regexes>...]] [POST_INCLUDE_REGEXES [<regexes>...]] [POST_EXCLUDE_REGEXES [<regexes>...]] [POST_INCLUDE_FILES [<files>...]] [POST_EXCLUDE_FILES [<files>...]])",
      "file(WRITE <filename> <content>...)",
      "file(APPEND <filename> <content>...)",
      "file(TOUCH [<files>...])",
      "file(TOUCH_NOCREATE [<files>...])",
      "file(GENERATE OUTPUT output-file <INPUT input-file|CONTENT content> [CONDITION expression] [TARGET target] [NO_SOURCE_PERMISSIONS | USE_SOURCE_PERMISSIONS | FILE_PERMISSIONS <permissions>...] [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF] ])",
      "file(CONFIGURE OUTPUT output-file CONTENT content [ESCAPE_QUOTES] [@ONLY] [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF] ])",
      "file(GLOB <variable> [LIST_DIRECTORIES true|false] [RELATIVE <path>] [CONFIGURE_DEPENDS] [<globbing-expressions>...])",
      "file(GLOB_RECURSE <variable> [FOLLOW_SYMLINKS] [LIST_DIRECTORIES true|false] [RELATIVE <path>] [CONFIGURE_DEPENDS] [<globbing-expressions>...])",
      "file(MAKE_DIRECTORY [<directories>...])",
      "file(REMOVE [<files>...])",
      "file(REMOVE_RECURSE [<files>...])",
      "file(RENAME <oldname> <newname> [RESULT <result>] [NO_REPLACE])",
      "file(COPY_FILE <oldname> <newname> [RESULT <result>] [ONLY_IF_DIFFERENT])",
      "file(<COPY|INSTALL> <files>... DESTINATION <dir> [NO_SOURCE_PERMISSIONS | USE_SOURCE_PERMISSIONS] [FILE_PERMISSIONS <permissions>...] [DIRECTORY_PERMISSIONS <permissions>...] [FOLLOW_SYMLINK_CHAIN] [FILES_MATCHING] [[PATTERN <pattern> | REGEX <regex>] [EXCLUDE] [PERMISSIONS <permissions>...]] [...])",
      "file(SIZE <filename> <variable>)",
      "file(READ_SYMLINK <linkname> <variable>)",
      "file(CREATE_LINK <original> <linkname> [RESULT <result>] [COPY_ON_ERROR] [SYMBOLIC])",
      "file(CHMOD <files>... <directories>... [PERMISSIONS <permissions>...] [FILE_PERMISSIONS <permissions>...] [DIRECTORY_PERMISSIONS <permissions>...])",
      "file(CHMOD_RECURSE <files>... <directories>... [PERMISSIONS <permissions>...] [FILE_PERMISSIONS <permissions>...] [DIRECTORY_PERMISSIONS <permissions>...])",
      "file(REAL_PATH <path> <out-var> [BASE_DIRECTORY <dir>] [EXPAND_TILDE])",
      "file(RELATIVE_PATH <variable> <directory> <file>)",
      "file(TO_CMAKE_PATH \"<path>\" <variable>)",
      "file(TO_NATIVE_PATH \"<path>\" <variable>)",
      "file(DOWNLOAD <url> [<file>] [<options>...])",
      "file(UPLOAD <file> <url> [<options>...])",
      "file(LOCK <path> [DIRECTORY] [RELEASE] [GUARD <FUNCTION|FILE|PROCESS>] [RESULT_VARIABLE <variable>] [TIMEOUT <seconds>])",
      "file(ARCHIVE_CREATE OUTPUT <archive> PATHS <paths>... [FORMAT <format>] [COMPRESSION <compression> [COMPRESSION_LEVEL <compression-level>]] [MTIME <mtime>] [VERBOSE])",
      "file(ARCHIVE_EXTRACT INPUT <archive> [DESTINATION <dir>] [PATTERNS <patterns>...] [LIST_ONLY] [VERBOSE])"
    ],
    "keyword": ["READ", "OFFSET", "LIMIT", "HEX", "STRINGS", "HASH", "TIMESTAMP", "UTC", "GET_RUNTIME_DEPENDENCIES", "RESOLVED_DEPENDENCIES_VAR", "UNRESOLVED_DEPENDENCIES_VAR", "CONFLICTING_DEPENDENCIES_PREFIX", "EXECUTABLES", "LIBRARIES", "MODULES", "DIRECTORIES", "BUNDLE_EXECUTABLE", "PRE_INCLUDE_REGEXES", "PRE_EXCLUDE_REGEXES", "POST_INCLUDE_REGEXES", "POST_EXCLUDE_REGEXES", "POST_INCLUDE_FILES", "POST_EXCLUDE_FILES", "WRITE", "APPEND", "TOUCH", "TOUCH_NOCREATE", "GENERATE", "OUTPUT", "INPUT", "CONTENT", "CONDITION", "TARGET", "NO_SOURCE_PERMISSIONS", "USE_SOURCE_PERMISSIONS", "FILE_PERMISSIONS", "NEWLINE_STYLE", "UNIX", "DOS", "WIN32", "LF", "CRLF", "CONFIGURE", "ESCAPE_QUOTES", "@ONLY", "GLOB", "LIST_DIRECTORIES", "RELATIVE", "CONFIGURE_DEPENDS", "GLOB_RECURSE", "FOLLOW_SYMLINKS", "MAKE_DIRECTORY", "REMOVE", "REMOVE_RECURSE", "RENAME", "RESULT", "NO_REPLACE", "COPY_FILE", "ONLY_IF_DIFFERENT", "COPY", "INSTALL", "DESTINATION", "DIRECTORY_PERMISSIONS", "FOLLOW_SYMLINK_CHAIN", "FILES_MATCHING", "PATTERN", "REGEX", "EXCLUDE", "PERMISSIONS", "SIZE", "READ_SYMLINK", "CREATE_LINK", "COPY_ON_ERROR", "SYMBOLIC", "CHMOD", "CHMOD_RECURSE", "REAL_PATH", "EXPAND_TILDE","BASE_DIRECTORY", "RELATIVE_PATH", "TO_CMAKE_PATH", "TO_NATIVE_PATH", "DOWNLOAD", "UPLOAD", "LOCK", "DIRECTORY", "RELEASE", "GUARD", "FUNCTION", "FILE", "PROCESS", "RESULT_VARIABLE", "TIMEOUT", "ARCHIVE_CREATE", "PATHS", "ARCHIVE_EXTRACT", "FORMAT", "COMPRESSION", "COMPRESSION_LEVEL", "MTIME", "VERBOSE", "LIST_ONLY", "PATTERNS"]
  },
  "find_file": {
    "sig": [
      "find_file(<var> name1 [path1 path2 ...])",
      "find_file(<var> name | NAMES name1 [name2 ...] [HINTS [path | ENV var]... ] [PATHS [path | ENV var]... ] [PATH_SUFFIXES suffix1 [suffix2 ...]] [DOC \"cache documentation string\"] [NO_CACHE] [REQUIRED] [NO_DEFAULT_PATH] [NO_PACKAGE_ROOT_PATH] [NO_CMAKE_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_SYSTEM_PATH] [CMAKE_FIND_ROOT_PATH_BOTH | ONLY_CMAKE_FIND_ROOT_PATH | NO_CMAKE_FIND_ROOT_PATH])",
      "find_file(<var> NAMES name PATHS paths... NO_DEFAULT_PATH)",
      "find_file(<var> NAMES name)"
    ],
    "keyword": ["NAMES", "HINTS", "PATHS", "ENV", "PATH_SUFFIXES", "DOC", "NO_CACHE", "REQUIRED", "NO_DEFAULT_PATH", "NO_PACKAGE_ROOT_PATH", "NO_CMAKE_PATH", "NO_CMAKE_ENVIRONMENT_PATH", "NO_SYSTEM_ENVIRONMENT_PATH", "NO_CMAKE_SYSTEM_PATH", "CMAKE_FIND_ROOT_PATH_BOTH", "ONLY_CMAKE_FIND_ROOT_PATH", "NO_CMAKE_FIND_ROOT_PATH"]
  },
  "find_library": {
    "sig": [
      "find_library(<var> name1 [path1 path2 ...])",
      "find_library(<var> name | NAMES name1 [name2 ...] [NAMES_PER_DIR] [HINTS [path | ENV var]... ] [PATHS [path | ENV var]... ] [PATH_SUFFIXES suffix1 [suffix2 ...]] [DOC \"cache documentation string\"] [NO_CACHE] [REQUIRED] [NO_DEFAULT_PATH] [NO_PACKAGE_ROOT_PATH] [NO_CMAKE_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_SYSTEM_PATH] [CMAKE_FIND_ROOT_PATH_BOTH | ONLY_CMAKE_FIND_ROOT_PATH | NO_CMAKE_FIND_ROOT_PATH])",
      "find_library(<var> NAMES name PATHS paths... NO_DEFAULT_PATH)",
      "find_library(<var> NAMES name)"
    ],
    "keyword": ["NAMES", "NAMES_PER_DIR", "HINTS", "PATHS", "ENV", "PATH_SUFFIXES", "DOC", "NO_CACHE", "REQUIRED", "NO_DEFAULT_PATH", "NO_PACKAGE_ROOT_PATH", "NO_CMAKE_PATH", "NO_CMAKE_ENVIRONMENT_PATH", "NO_SYSTEM_ENVIRONMENT_PATH", "NO_CMAKE_SYSTEM_PATH", "CMAKE_FIND_ROOT_PATH_BOTH", "ONLY_CMAKE_FIND_ROOT_PATH", "NO_CMAKE_FIND_ROOT_PATH"]
  },
  "find_package": {
    "sig": [
      "find_package(<PackageName> [version] [EXACT] [QUIET] [MODULE] [REQUIRED] [[COMPONENTS] [components...]] [OPTIONAL_COMPONENTS components...] [NO_POLICY_SCOPE])",
      "find_package(<PackageName> [version] [EXACT] [QUIET] [REQUIRED] [[COMPONENTS] [components...]] [OPTIONAL_COMPONENTS components...] [CONFIG|NO_MODULE] [NO_POLICY_SCOPE] [NAMES name1 [name2 ...]] [CONFIGS config1 [config2 ...]] [HINTS path1 [path2 ... ]] [PATHS path1 [path2 ... ]] [PATH_SUFFIXES suffix1 [suffix2 ...]] [NO_DEFAULT_PATH] [NO_PACKAGE_ROOT_PATH] [NO_CMAKE_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_PACKAGE_REGISTRY] [NO_CMAKE_BUILDS_PATH] # Deprecated; does nothing. [NO_CMAKE_SYSTEM_PATH] [NO_CMAKE_SYSTEM_PACKAGE_REGISTRY] [CMAKE_FIND_ROOT_PATH_BOTH | ONLY_CMAKE_FIND_ROOT_PATH | NO_CMAKE_FIND_ROOT_PATH])",
      "find_package(<PackageName> PATHS paths... NO_DEFAULT_PATH)",
      "find_package(<PackageName>)"
    ],
    "keyword": ["EXACT", "QUIET", "MODULE", "REQUIRED", "COMPONENTS", "OPTIONAL_COMPONENTS", "NO_POLICY_SCOPE", "CONFIG", "NO_MODULE", "NAMES", "CONFIGS", "HINTS", "PATHS", "PATH_SUFFIXES", "NO_DEFAULT_PATH", "NO_PACKAGE_ROOT_PATH", "NO_CMAKE_PATH", "NO_CMAKE_ENVIRONMENT_PATH", "NO_SYSTEM_ENVIRONMENT_PATH", "NO_CMAKE_PACKAGE_REGISTRY", "NO_CMAKE_BUILDS_PATH", "NO_CMAKE_SYSTEM_PATH", "NO_CMAKE_SYSTEM_PACKAGE_REGISTRY", "CMAKE_FIND_ROOT_PATH_BOTH", "ONLY_CMAKE_FIND_ROOT_PATH", "NO_CMAKE_FIND_ROOT_PATH"]
  },
  "find_path": {
    "sig": [
      "find_path(<var> name1 [path1 path2 ...])",
      "find_path(<var> name | NAMES name1 [name2 ...] [HINTS [path | ENV var]... ] [PATHS [path | ENV var]... ] [PATH_SUFFIXES suffix1 [suffix2 ...]] [DOC \"cache documentation string\"] [NO_CACHE] [REQUIRED] [NO_DEFAULT_PATH] [NO_PACKAGE_ROOT_PATH] [NO_CMAKE_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_SYSTEM_PATH] [CMAKE_FIND_ROOT_PATH_BOTH | ONLY_CMAKE_FIND_ROOT_PATH | NO_CMAKE_FIND_ROOT_PATH])",
      "find_path(<var> NAMES name PATHS paths... NO_DEFAULT_PATH)",
      "find_path(<var> NAMES name)"
    ],
    "keyword": ["NAMES", "HINTS", "PATHS", "ENV", "PATH_SUFFIXES", "DOC", "NO_CACHE", "REQUIRED", "NO_DEFAULT_PATH", "NO_PACKAGE_ROOT_PATH", "NO_CMAKE_PATH", "NO_CMAKE_ENVIRONMENT_PATH", "NO_SYSTEM_ENVIRONMENT_PATH", "NO_CMAKE_SYSTEM_PATH", "CMAKE_FIND_ROOT_PATH_BOTH", "ONLY_CMAKE_FIND_ROOT_PATH", "NO_CMAKE_FIND_ROOT_PATH"]
  },
  "find_program": {
    "sig": [
      "find_program(<var> name1 [path1 path2 ...])",
      "find_program(<var> name | NAMES name1 [name2 ...] [NAMES_PER_DIR] [HINTS [path | ENV var]... ] [PATHS [path | ENV var]... ] [REGISTRY_VIEW (64|32|64_32|32_64|HOST|TARGET|BOTH)] [PATH_SUFFIXES suffix1 [suffix2 ...]] [DOC \"cache documentation string\"] [NO_CACHE] [REQUIRED] [NO_DEFAULT_PATH] [NO_PACKAGE_ROOT_PATH] [NO_CMAKE_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_SYSTEM_PATH] [CMAKE_FIND_ROOT_PATH_BOTH | ONLY_CMAKE_FIND_ROOT_PATH | NO_CMAKE_FIND_ROOT_PATH])",
      "find_program(<var> NAMES name PATHS paths... NO_DEFAULT_PATH)",
      "find_program(<var> NAMES name)"
    ],
    "keyword": ["NAMES", "NAMES_PER_DIR", "HINTS", "PATHS", "ENV", "PATH_SUFFIXES", "DOC", "NO_CACHE", "REQUIRED", "NO_DEFAULT_PATH", "NO_PACKAGE_ROOT_PATH", "NO_CMAKE_PATH", "NO_CMAKE_ENVIRONMENT_PATH", "NO_SYSTEM_ENVIRONMENT_PATH", "NO_CMAKE_SYSTEM_PATH", "CMAKE_FIND_ROOT_PATH_BOTH", "ONLY_CMAKE_FIND_ROOT_PATH", "NO_CMAKE_FIND_ROOT_PATH", "REGISTRY_VIEW", "64", "32", "64_32", "32_64", "HOST", "TARGET", "BOTH"]
  },
  "fltk_wrap_ui": {
    "sig": [
      "fltk_wrap_ui(resultingLibraryName source1 source2 ... sourceN)"
    ]
  },
  "foreach": {
    "sig": [
      "foreach(<loop_var> <items>)",
      "foreach(<loop_var> RANGE <stop>)",
      "foreach(<loop_var> RANGE <start> <stop> [<step>])",
      "foreach(<loop_var> IN [LISTS [<lists>]] [ITEMS [<items>]])",
      "foreach(<loop_var>... IN ZIP_LISTS <lists>)"
    ],
    "keyword": ["RANGE", "IN", "LISTS", "ITEMS", "ZIP_LISTS"]
  },
  "function": {
    "sig": [
      "function(<name> [<arg1> ...])"
    ]
  },
  "get_cmake_property": {
    "sig": [
      "get_cmake_property(<var> <property>)"
    ]
  },
  "get_directory_property": {
    "sig": [
      "get_directory_property(<variable> [DIRECTORY <dir>] <prop-name>)",
      "get_directory_property(<variable> [DIRECTORY <dir>] DEFINITION <var-name>)"
    ],
    "keyword": ["DIRECTORY", "DEFINITION"]
  },
  "get_filename_component": {
    "sig": [
      "get_filename_component(<var> <FileName> { DIRECTORY | NAME | EXT | NAME_WE | LAST_EXT | NAME_WLE | PATH } [CACHE])",
      "get_filename_component(<var> <FileName> { ABSOLUTE | REALPATH } [BASE_DIR <dir>] [CACHE])",
      "get_filename_component(<var> <FileName> PROGRAM [PROGRAM_ARGS <arg_var>] [CACHE])"
    ],
    "keyword": ["DIRECTORY", "NAME", "EXT", "NAME_WE", "LAST_EXT", "NAME_WLE", "PATH", "ABSOLUTE", "REALPATH", "BASE_DIR", "PROGRAM", "PROGRAM_ARGS", "CACHE"]
  },
  "get_property": {
    "sig": [
      "get_property(<variable> <GLOBAL | DIRECTORY [<dir>] | TARGET <target> | SOURCE <source> [DIRECTORY <dir> | TARGET_DIRECTORY <target>] | INSTALL <file> | TEST <test> | CACHE <entry> | VARIABLE > PROPERTY <name> [SET | DEFINED | BRIEF_DOCS | FULL_DOCS])"
    ],
    "keyword": ["GLOBAL", "DIRECTORY", "TARGET", "TARGET_DIRECTORY", "SOURCE", "INSTALL", "TEST", "CACHE", "VARIABLE", "PROPERTY", "SET", "DEFINED", "BRIEF_DOCS", "FULL_DOCS"]
  },
  "get_source_file_property": {
    "sig": [
      "get_source_file_property(<variable> <file> [DIRECTORY <dir> | TARGET_DIRECTORY <target>] <property>)"
    ],
    "keyword": ["DIRECTORY", "TARGET_DIRECTORY"]
  },
  "get_target_property": {
    "sig": [
      "get_target_property(<var> target property)"
    ]
  },
  "get_test_property": {
    "sig": [
      "get_test_property(<test> <property> [DIRECTORY <dir>] <variable>)"
    ],
    "keyword": ["DIRECTORY"]
  },
  "if": {
    "sig": [
      "if(<condition>)",
      "if(<constant>)",
      "if(<variable|string>)",
      "if([NOT] <condition> { <variable> | COMMAND <command-name> | POLICY <policy-id> | TARGET <target_name> | TEST <test-name>})",
      "if(<cond1> AND <cond2>)",
      "if(<cond1> OR <cond2>)",
      "if((condition)",
      "if(COMMAND command-name)",
      "if(POLICY policy-id)",
      "if(TARGET target-name)",
      "if(TEST test-name)",
      "if(DEFINED <name>|CACHE{<name>}|ENV{<name>})",
      "if(<variable|string> IN_LIST <variable>)",
      "if(EXISTS path-to-file-or-directory)",
      "if(file1 IS_NEWER_THAN file2)",
      "if(IS_DIRECTORY path-to-directory)",
      "if(IS_SYMLINK file-name)",
      "if(IS_ABSOLUTE path)",
      "if(<variable|string> MATCHES regex)",
      "if(<variable|string> LESS <variable|string>)",
      "if(<variable|string> GREATER <variable|string>)",
      "if(<variable|string> EQUAL <variable|string>)",
      "if(<variable|string> LESS_EQUAL <variable|string>)",
      "if(<variable|string> GREATER_EQUAL <variable|string>)",
      "if(<variable|string> STRLESS <variable|string>)",
      "if(<variable|string> STRGREATER <variable|string>)",
      "if(<variable|string> STREQUAL <variable|string>)",
      "if(<variable|string> STRLESS_EQUAL <variable|string>)",
      "if(<variable|string> STRGREATER_EQUAL <variable|string>)",
      "if(<variable|string> VERSION_LESS <variable|string>)",
      "if(<variable|string> VERSION_GREATER <variable|string>)",
      "if(<variable|string> VERSION_EQUAL <variable|string>)",
      "if(<variable|string> VERSION_LESS_EQUAL <variable|string>)",
      "if(<variable|string> VERSION_GREATER_EQUAL <variable|string>)",
      "if(${var2})",
      "if(var1)",
      "if(var2)"
    ],
    "keyword": ["NOT", "COMMAND", "POLICY", "TARGET", "TEST", "AND", "OR", "DEFINED", "CACHE", "ENV", "IN_LIST", "EXISTS", "IS_NEWER_THAN", "IS_DIRECTORY", "IS_SYMLINK", "IS_ABSOLUTE", "MATCHES", "LESS", "GREATER", "EQUAL", "LESS_EQUAL", "GREATER_EQUAL", "STRLESS", "STRGREATER", "STREQUAL", "STRLESS_EQUAL", "STRGREATER_EQUAL", "VERSION_LESS", "VERSION_GREATER", "VERSION_EQUAL", "VERSION_LESS_EQUAL", "VERSION_GREATER_EQUAL"]
  },
  "include": {
    "sig": [
      "include(<file|module> [OPTIONAL] [RESULT_VARIABLE <var>] [NO_POLICY_SCOPE])"
    ],
    "keyword": ["OPTIONAL", "RESULT_VARIABLE", "NO_POLICY_SCOPE"]
  },
  "include_directories": {
    "sig": [
      "include_directories([AFTER|BEFORE] [SYSTEM] dir1 [dir2 ...])"
    ],
    "keyword": ["AFTER", "BEFORE", "SYSTEM"]
  },
  "include_external_msproject": {
    "sig": [
      "include_external_msproject(projectname location [TYPE projectTypeGUID] [GUID projectGUID] [PLATFORM platformName] dep1 dep2 ...)"
    ],
    "keyword": ["TYPE", "GUID", "PLATFORM"]
  },
  "include_guard": {
    "sig": [
      "include_guard([DIRECTORY|GLOBAL])"
    ],
    "keyword": ["DIRECTORY", "GLOBAL"]
  },
  "include_regular_expression": {
    "sig": [
      "include_regular_expression(regex_match [regex_complain])"
    ]
  },
  "install": {
    "sig": [
      "install(TARGETS <target>... [...])",
      "install(IMPORTED_RUNTIME_ARTIFACTS <target>... [...])",
      "install({FILES | PROGRAMS} <file>... [...])",
      "install(DIRECTORY <dir>... [...])",
      "install(SCRIPT <file> [...])",
      "install(CODE <code> [...])",
      "install(EXPORT <export-name> [...])",
      "install(RUNTIME_DEPENDENCY_SET <set-name> [...])",
      "install(TARGETS targets... [EXPORT <export-name>] [RUNTIME_DEPENDENCIES args...|RUNTIME_DEPENDENCY_SET <set-name>] [[ARCHIVE|LIBRARY|RUNTIME|OBJECTS|FRAMEWORK|BUNDLE| PRIVATE_HEADER|PUBLIC_HEADER|RESOURCE] [DESTINATION <dir>] [PERMISSIONS {OWNER_READ | OWNER_WRITE | OWNER_EXECUTE | GROUP_READ | GROUP_WRITE | GROUP_EXECUTE | WORLD_READ | WORLD_WRITE | WORLD_EXECUTE | SETUID | SETGID}] [CONFIGURATIONS [Debug|Release|...]] [COMPONENT <component>] [NAMELINK_COMPONENT <component>] [OPTIONAL] [EXCLUDE_FROM_ALL] [NAMELINK_ONLY|NAMELINK_SKIP] ] [...] [INCLUDES DESTINATION [<dir> ...]])",
      "install(RUNTIME_DEPENDENCY_SET)",
      "install(IMPORTED_RUNTIME_ARTIFACTS targets... [RUNTIME_DEPENDENCY_SET <set-name>] [[LIBRARY|RUNTIME|FRAMEWORK|BUNDLE] [DESTINATION <dir>] [PERMISSIONS permissions...] [CONFIGURATIONS [Debug|Release|...]] [COMPONENT <component>] [OPTIONAL] [EXCLUDE_FROM_ALL] ] [...])",
      "install(<FILES|PROGRAMS> files... TYPE <type> | DESTINATION <dir> [PERMISSIONS permissions...] [CONFIGURATIONS [Debug|Release|...]] [COMPONENT <component>] [RENAME <name>] [OPTIONAL] [EXCLUDE_FROM_ALL])",
      "install(DIRECTORY dirs... TYPE <type> | DESTINATION <dir> [FILE_PERMISSIONS permissions...] [DIRECTORY_PERMISSIONS permissions...] [USE_SOURCE_PERMISSIONS] [OPTIONAL] [MESSAGE_NEVER] [CONFIGURATIONS [Debug|Release|...]] [COMPONENT <component>] [EXCLUDE_FROM_ALL] [FILES_MATCHING] [[PATTERN <pattern> | REGEX <regex>] [EXCLUDE] [PERMISSIONS permissions...]] [...])",
      "install([[SCRIPT <file>] [CODE <code>]] [ALL_COMPONENTS | COMPONENT <component>] [EXCLUDE_FROM_ALL] [...])",
      "install(EXPORT <export-name> DESTINATION <dir> [NAMESPACE <namespace>] [[FILE <name>.cmake]| [PERMISSIONS permissions...] [CONFIGURATIONS [Debug|Release|...]] [EXPORT_LINK_INTERFACE_LIBRARIES] [COMPONENT <component>] [EXCLUDE_FROM_ALL])",
      "install(EXPORT_ANDROID_MK <export-name> DESTINATION <dir> [...])",
      "install(RUNTIME_DEPENDENCY_SET <set-name> [[LIBRARY|RUNTIME|FRAMEWORK] [DESTINATION <dir>] [PERMISSIONS permissions...] [CONFIGURATIONS [Debug|Release|...]] [COMPONENT <component>] [NAMELINK_COMPONENT <component>] [OPTIONAL] [EXCLUDE_FROM_ALL] ] [...] [PRE_INCLUDE_REGEXES regexes...] [PRE_EXCLUDE_REGEXES regexes...] [POST_INCLUDE_REGEXES regexes...] [POST_EXCLUDE_REGEXES regexes...] [POST_INCLUDE_FILES files...] [POST_EXCLUDE_FILES files...] [DIRECTORIES directories...])"
    ],
    "keyword": ["TARGETS", "IMPORTED_RUNTIME_ARTIFACTS", "FILES", "PROGRAMS", "DIRECTORY", "SCRIPT", "CODE", "EXPORT", "RUNTIME_DEPENDENCIES", "RUNTIME_DEPENDENCY_SET", "ARCHIVE", "LIBRARY", "RUNTIME", "OBJECTS", "FRAMEWORK", "BUNDLE", "PRIVATE_HEADER", "PUBLIC_HEADER", "RESOURCE", "DESTINATION", "PERMISSIONS", "OWNER_READ", "OWNER_WRITE", "OWNER_EXECUTE", "GROUP_READ", "GROUP_WRITE", "GROUP_EXECUTE", "WORLD_READ", "WORLD_WRITE", "WORLD_EXECUTE", "SETUID", "SETGID", "CONFIGURATIONS", "COMPONENT", "NAMELINK_COMPONENT", "OPTIONAL", "EXCLUDE_FROM_ALL", "NAMELINK_ONLY", "NAMELINK_SKIP", "INCLUDES", "TYPE", "RENAME", "MESSAGE_NEVER", "FILE_PERMISSIONS", "DIRECTORY_PERMISSIONS", "USE_SOURCE_PERMISSIONS", "FILES_MATCHING", "PATTERN", "REGEX", "EXCLUDE", "ALL_COMPONENTS", "NAMESPACE", "FILE", "EXPORT_LINK_INTERFACE_LIBRARIES", "EXPORT_ANDROID_MK", "PRE_INCLUDE_REGEXES", "PRE_EXCLUDE_REGEXES", "POST_INCLUDE_REGEXES", "POST_EXCLUDE_REGEXES", "POST_INCLUDE_FILES", "POST_EXCLUDE_FILES", "DIRECTORIES"]
  },
  "install_files": {
    "sig": [
      "install_files(<dir> extension file file ...)",
      "install_files(<dir> regexp)",
      "install_files(<dir> FILES file file ...)"
    ],
    "deprecated": true,
    "keyword": ["FILES"]
  },
  "install_programs": {
    "sig": [
      "install_programs(<dir> file1 file2 [file3 ...])",
      "install_programs(<dir> FILES file1 [file2 ...])",
      "install_programs(<dir> regexp)"
    ],
    "deprecated": true,
    "keyword": ["FILES"]
  },
  "install_targets": {
    "sig": [
      "install_targets(<dir> [RUNTIME_DIRECTORY dir] target target)"
    ],
    "deprecated": true,
    "keyword": ["RUNTIME_DIRECTORY"]
  },
  "link_directories": {
    "sig": [
      "link_directories([AFTER|BEFORE] directory1 [directory2 ...])"
    ],
    "keyword": ["AFTER", "BEFORE"]
  },
  "link_libraries": {
    "sig": [
      "link_libraries([item1 [item2 [...]]] [[debug|optimized|general] <item>] ...)"
    ],
    "keyword": ["debug", "optimized", "general"]
  },
  "list": {
    "sig": [
      "list(LENGTH <list> <output variable>)",
      "list(GET <list> <element index> [<element index> ...] <output variable>)",
      "list(JOIN <list> <glue> <output variable>)",
      "list(SUBLIST <list> <begin> <length> <output variable>)",
      "list(FIND <list> <value> <output variable>)",
      "list(APPEND <list> [<element> ...])",
      "list(FILTER <list> <INCLUDE|EXCLUDE> REGEX <regular_expression>)",
      "list(INSERT <list> <element_index> <element> [<element> ...])",
      "list(POP_BACK <list> [<out-var>...])",
      "list(POP_FRONT <list> [<out-var>...])",
      "list(PREPEND <list> [<element> ...])",
      "list(REMOVE_ITEM <list> <value> [<value> ...])",
      "list(REMOVE_AT <list> <index> [<index> ...])",
      "list(REMOVE_DUPLICATES <list>)",
      "list(TRANSFORM <list> <ACTION> [<SELECTOR>] [OUTPUT_VARIABLE <output variable>])",
      "list(TRANSFORM <list> (APPEND|PREPEND) <value> ...)",
      "list(TRANSFORM <list> (TOLOWER|TOUPPER) ...)",
      "list(TRANSFORM <list> STRIP ...)",
      "list(TRANSFORM <list> GENEX_STRIP ...)",
      "list(TRANSFORM <list> REPLACE <regular_expression> <replace_expression> ...)",
      "list(REVERSE <list>)",
      "list(SORT <list> [COMPARE <compare>] [CASE <case>] [ORDER <order>])"
    ],
    "keyword": ["LENGTH", "GET", "JOIN", "SUBLIST", "FIND", "APPEND", "FILTER", "INCLUDE", "EXCLUDE", "REGEX", "INSERT", "POP_BACK", "POP_FRONT", "PREPEND", "REMOVE_ITEM", "REMOVE_AT", "REMOVE_DUPLICATES", "TRANSFORM", "ACTION", "SELECTOR", "OUTPUT_VARIABLE", "TOLOWER", "TOUPPER", "STRIP", "GENEX_STRIP", "REPLACE", "REVERSE", "SORT", "COMPARE", "CASE", "ORDER"]
  },
  "load_cache": {
    "sig": [
      "load_cache(pathToBuildDirectory READ_WITH_PREFIX prefix entry1...)",
      "load_cache(pathToBuildDirectory [EXCLUDE entry1...] [INCLUDE_INTERNALS entry1...])"
    ],
    "keyword": ["READ_WITH_PREFIX", "EXCLUDE", "INCLUDE_INTERNALS"]
  },
  "load_command": {
    "sig": [
      "load_command(COMMAND_NAME <loc1> [loc2 ...])"
    ],
    "deprecated": true,
    "keyword": ["COMMAND_NAME"]
  },
  "macro": {
    "sig": [
      "macro(<name> [<arg1> ...])"
    ]
  },
  "make_directory": {
    "sig": [
      "make_directory(directory)"
    ],
    "deprecated": true
  },
  "mark_as_advanced": {
    "sig": [
      "mark_as_advanced([CLEAR|FORCE] <var1> ...)"
    ],
    "keyword": ["CLEAR", "FORCE"]
  },
  "math": {
    "sig": [
      "math(EXPR <variable> \"<expression>\" [OUTPUT_FORMAT {DECIMAL | HEXADECIMAL}])"
    ],
    "keyword": ["EXPR", "OUTPUT_FORMAT", "DECIMAL", "HEXADECIMAL"]
  },
  "message": {
    "sig": [
      "message([ FATAL_ERROR | SEND_ERROR | WARNING | AUTHOR_WARNING | DEPRECATION | NOTICE | STATUS | VERBOSE | DEBUG | TRACE ] \"message text\" ...)",
      "message(<checkState> { CHECK_FAIL | CHECK_START | CHECK_PASS } \"message\" ...)",
      "message(CONFIGURE_LOG <text> ...)"
    ],
    "keyword": ["FATAL_ERROR", "SEND_ERROR", "WARNING", "AUTHOR_WARNING", "DEPRECATION", "NOTICE", "STATUS", "VERBOSE", "DEBUG", "TRACE", "CHECK_FAIL", "CHECK_START", "CHECK_PASS", "CONFIGURE_LOG"]
  },
  "option": {
    "sig": [
      "option(<variable> \"<help_text>\" [value])"
    ]
  },
  "output_required_files": {
    "sig": [
      "output_required_files(srcfile outputfile)"
    ],
    "deprecated": true
  },
  "project": {
    "sig": [
      "project(<project-name> [<language-name> [C|CXX|CUDA|OBJC|OBJCXX|Fortran|HIP|ISPC|ASM|NONE]... ])",
      "project(<project-name> [VERSION <major>[.<minor>[.<patch>[.<tweak>]]]] [DESCRIPTION <project-description-string>] [HOMEPAGE_URL <url-string>] [LANGUAGES ...])",
      "project(Project)"
    ],
    "keyword": ["VERSION", "DESCRIPTION", "HOMEPAGE_URL", "LANGUAGES", "C", "CXX", "CUDA", "OBJC", "OBJCXX", "Fortran", "HIP", "ISPC", "ASM", "NONE"]
  },
  "qt_wrap_cpp": {
    "sig": [
      "qt_wrap_cpp(resultingLibraryName DestName SourceLists ...)"
    ],
    "deprecated": true
  },
  "qt_wrap_ui": {
    "sig": [
      "qt_wrap_ui(resultingLibraryName HeadersDestName SourcesDestName SourceLists ...)"
    ],
    "deprecated": true
  },
  "remove": {
    "sig": [
      "remove(<var> <value> ...)"
    ],
    "deprecated": true
  },
  "remove_definitions": {
    "sig": [
      "remove_definitions(-DFOO -DBAR ...)"
    ]
  },
  "return": {
    "sig": [
      "return([PROPAGATE <var-name>...])"
    ],
    "keyword": ["PROPAGATE"]
  },
  "separate_arguments": {
    "sig": [
      "separate_arguments(<variable> { UNIX_COMMAND | WINDOWS_COMMAND | NATIVE_COMMAND } [PROGRAM [SEPARATE_ARGS]] <args>)",
      "separate_arguments(<var>)"
    ],
    "keyword": ["UNIX_COMMAND", "WINDOWS_COMMAND", "NATIVE_COMMAND", "PROGRAM", "SEPARATE_ARGS"]
  },
  "set": {
    "sig": [
      "set(<variable> <value>... [PARENT_SCOPE])",
      "set(<variable> { ON | OFF | <value>... } CACHE { FILEPATH | PATH | STRING | INTERNAL | BOOL } <docstring> [FORCE])",
      "set(ENV{<variable>} [<value>])"
    ],
    "keyword": ["PARENT_SCOPE", "ON", "OFF", "CACHE", "FILEPATH", "PATH", "STRING", "INTERNAL", "BOOL", "FORCE", "ENV"]
  },
  "set_directory_properties": {
    "sig": [
      "set_directory_properties(PROPERTIES prop1 value1 [prop2 value2] ...)"
    ]
  },
  "set_property": {
    "sig": [
      "set_property(<GLOBAL | DIRECTORY [<dir>] | TARGET [<target1> ...] | SOURCE [<src1> ...] [DIRECTORY <dirs> ...] [TARGET_DIRECTORY <targets> ...] | INSTALL [<file1> ...] | TEST [<test1> ...] | CACHE [<entry1> ...] > [APPEND] [APPEND_STRING] PROPERTY <name> [<value1> ...])"
    ],
    "keyword": ["GLOBAL", "DIRECTORY", "TARGET_DIRECTORY", "TARGET", "SOURCE", "INSTALL", "TEST", "CACHE", "APPEND", "APPEND_STRING", "PROPERTY"]
  },
  "set_source_files_properties": {
    "sig": [
      "set_source_files_properties(<files> ... [DIRECTORY <dirs> ...] [TARGET_DIRECTORY <targets> ...] PROPERTIES <prop1> <value1> [<prop2> <value2>] ...)"
    ],
    "keyword": ["DIRECTORY", "TARGET_DIRECTORY", "PROPERTIES"]
  },
  "set_target_properties": {
    "sig": [
      "set_target_properties(target1 target2 ... PROPERTIES prop1 value1 prop2 value2 ...)"
    ],
    "keyword": ["PROPERTIES"]
  },
  "set_tests_properties": {
    "sig": [
      "set_tests_properties(test1 [test2...] PROPERTIES prop1 value1 prop2 value2)"
    ],
    "keyword": ["PROPERTIES"]
  },
  "site_name": {
    "sig": [
      "site_name(variable)"
    ]
  },
  "source_group": {
    "sig": [
      "source_group(<name> [FILES <src>...] [REGULAR_EXPRESSION <regex>])",
      "source_group(TREE <root> [PREFIX <prefix>] [FILES <src>...])",
      "source_group(TREE <root> PREFIX sources\\\\inc ...)",
      "source_group(<name> <regex>)",
      "source_group(<name> REGULAR_EXPRESSION <regex>)"
    ],
    "keyword": ["FILES", "REGULAR_EXPRESSION", "TREE", "PREFIX"]
  },
  "string": {
    "sig": [
      "string(FIND <string> <substring> <output_variable> [REVERSE])",
      "string(REPLACE <match_string> <replace_string> <output_variable> <input> [<input>...])",
      "string(REGEX MATCH <regular_expression> <output_variable> <input> [<input>...])",
      "string(REGEX MATCHALL <regular_expression> <output_variable> <input> [<input>...])",
      "string(REGEX REPLACE <regular_expression> <replacement_expression> <output_variable> <input> [<input>...])",
      "string(APPEND <string_variable> [<input>...])",
      "string(PREPEND <string_variable> [<input>...])",
      "string(CONCAT <output_variable> [<input>...])",
      "string(JOIN <glue> <output_variable> [<input>...])",
      "string(TOLOWER <string> <output_variable>)",
      "string(TOUPPER <string> <output_variable>)",
      "string(LENGTH <string> <output_variable>)",
      "string(SUBSTRING <string> <begin> <length> <output_variable>)",
      "string(STRIP <string> <output_variable>)",
      "string(GENEX_STRIP <string> <output_variable>)",
      "string(REPEAT <string> <count> <output_variable>)",
      "string(COMPARE LESS <string1> <string2> <output_variable>)",
      "string(COMPARE GREATER <string1> <string2> <output_variable>)",
      "string(COMPARE EQUAL <string1> <string2> <output_variable>)",
      "string(COMPARE NOTEQUAL <string1> <string2> <output_variable>)",
      "string(COMPARE LESS_EQUAL <string1> <string2> <output_variable>)",
      "string(COMPARE GREATER_EQUAL <string1> <string2> <output_variable>)",
      "string(<HASH> <output_variable> <input>)",
      "string(ASCII <number> [<number> ...] <output_variable>)",
      "string(HEX <string> <output_variable>)",
      "string(CONFIGURE <string> <output_variable> [@ONLY] [ESCAPE_QUOTES])",
      "string(MAKE_C_IDENTIFIER <string> <output_variable>)",
      "string(RANDOM [LENGTH <length>] [ALPHABET <alphabet>] [RANDOM_SEED <seed>] <output_variable>)",
      "string(TIMESTAMP <output_variable> [<format_string>] [UTC])",
      "string(UUID <output_variable> NAMESPACE <namespace> NAME <name> TYPE <MD5|SHA1> [UPPER])",
      "string(JSON <out-var> [ERROR_VARIABLE <error-variable>] GET <json-string> <member|index> [<member|index> ...])",
      "string(JSON <out-var> [ERROR_VARIABLE <error-variable>] TYPE <json-string> <member|index> [<member|index> ...])",
      "string(JSON <out-var> [ERROR_VARIABLE <error-var>] MEMBER <json-string> [<member|index> ...] <index>)",
      "string(JSON <out-var> [ERROR_VARIABLE <error-variable>] LENGTH <json-string> <member|index> [<member|index> ...])",
      "string(JSON <out-var> [ERROR_VARIABLE <error-variable>] REMOVE <json-string> <member|index> [<member|index> ...])",
      "string(JSON <out-var> [ERROR_VARIABLE <error-variable>] SET <json-string> <member|index> [<member|index> ...] <value>)",
      "string(JSON <out-var> [ERROR_VARIABLE <error-var>] EQUAL <json-string1> <json-string2>)"
    ],
    "keyword": ["FIND", "REVERSE", "REPLACE", "REGEX", "MATCH", "MATCHALL", "APPEND", "PREPEND", "CONCAT", "JOIN", "TOLOWER", "TOUPPER", "LENGTH", "SUBSTRING", "STRIP", "GENEX_STRIP", "REPEAT", "COMPARE", "LESS", "GREATER", "EQUAL", "NOTEQUAL", "LESS_EQUAL", "GREATER_EQUAL", "HASH", "ASCII", "HEX", "CONFIGURE", "@ONLY", "ESCAPE_QUOTES", "MAKE_C_IDENTIFIER", "RANDOM", "ALPHABET", "RANDOM_SEED", "TIMESTAMP", "UTC", "UUID", "NAMESPACE", "NAME", "TYPE", "MD5", "SHA1", "UPPER", "JSON", "ERROR_VARIABLE", "GET", "MEMBER", "REMOVE", "SET"]
  },
  "subdir_depends": {
    "sig": [
      "subdir_depends(subdir dep1 dep2 ...)"
    ],
    "deprecated": true
  },
  "subdirs": {
    "sig": [
      "subdirs(dir1 dir2 ...[EXCLUDE_FROM_ALL exclude_dir1 exclude_dir2 ...] [PREORDER])"
    ],
    "deprecated": true,
    "keyword": ["EXCLUDE_FROM_ALL", "PREORDER"]
  },
  "target_compile_definitions": {
    "sig": [
      "target_compile_definitions(<target> <INTERFACE|PUBLIC|PRIVATE> [items1...] [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])"
    ],
    "keyword": ["INTERFACE", "PUBLIC", "PRIVATE"]
  },
  "target_compile_features": {
    "sig": [
      "target_compile_features(<target> <PRIVATE|PUBLIC|INTERFACE> <feature> [...])"
    ],
    "keyword": ["PRIVATE", "PUBLIC", "INTERFACE"]
  },
  "target_compile_options": {
    "sig": [
      "target_compile_options(<target> [BEFORE] <INTERFACE|PUBLIC|PRIVATE> [items1...] [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])"
    ],
    "keyword": ["BEFORE", "INTERFACE", "PUBLIC", "PRIVATE"]
  },
  "target_include_directories": {
    "sig": [
      "target_include_directories(<target> [SYSTEM] [AFTER|BEFORE] <INTERFACE|PUBLIC|PRIVATE> [items1...] [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])"
    ],
    "keyword": ["SYSTEM", "AFTER", "BEFORE", "INTERFACE", "PUBLIC", "PRIVATE"]
  },
  "target_link_directories": {
    "sig": [
      "target_link_directories(<target> [BEFORE] <INTERFACE|PUBLIC|PRIVATE> [items1...] [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])"
    ],
    "keyword": ["BEFORE", "INTERFACE", "PUBLIC", "PRIVATE"]
  },
  "target_link_libraries": {
    "sig": [
      "target_link_libraries(<target> ... <item>... ...)",
      "target_link_libraries(<target> <PRIVATE|PUBLIC|INTERFACE> <item>... [<PRIVATE|PUBLIC|INTERFACE> <item>...]...)",
      "target_link_libraries(<target> <item>...)",
      "target_link_libraries(<target> <LINK_PRIVATE|LINK_PUBLIC> <lib>... [<LINK_PRIVATE|LINK_PUBLIC> <lib>...]...)",
      "target_link_libraries(<target> LINK_INTERFACE_LIBRARIES <item>...)",
      "target_link_libraries(main3 PRIVATE a3 $<TARGET_OBJECTS:obj3> b3)",
      "target_link_libraries(iface_obj3 INTERFACE obj3 $<TARGET_OBJECTS:obj3>)"
    ],
    "keyword": ["PRIVATE", "PUBLIC", "INTERFACE", "LINK_PRIVATE", "LINK_PUBLIC", "LINK_INTERFACE_LIBRARIES", "TARGET_OBJECTS"]
  },
  "target_link_options": {
    "sig": [
      "target_link_options(<target> [BEFORE] <INTERFACE|PUBLIC|PRIVATE> [items1...] [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])"
    ],
    "keyword": ["BEFORE", "INTERFACE", "PUBLIC", "PRIVATE"]
  },
  "target_precompile_headers": {
    "sig": [
      "target_precompile_headers(<target> <INTERFACE|PUBLIC|PRIVATE> [header1...] [<INTERFACE|PUBLIC|PRIVATE> [header2...] ...])",
      "target_precompile_headers(myTarget PUBLIC project_header.h PRIVATE [[\"other_header.h\"]] <unordered_map>)",
      "target_precompile_headers(<target> REUSE_FROM <other_target>)"
    ],
    "keyword": ["INTERFACE", "PUBLIC", "PRIVATE", "REUSE_FROM"]
  },
  "target_sources": {
    "sig": [
      "target_sources(<target> <INTERFACE|PUBLIC|PRIVATE> [items1...] [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])",
      "target_sources(<target> [<INTERFACE|PUBLIC|PRIVATE> [FILE_SET <set> [TYPE <type>] [BASE_DIRS <dirs>...] [FILES <files>...]]... ]...)"
    ],
    "keyword": ["INTERFACE", "PUBLIC", "PRIVATE", "FILE_SET", "TYPE", "BASE_DIRS", "FILES"]
  },
  "try_compile": {
    "sig": [
      "try_compile(<resultVar> <bindir> <srcdir> <projectName> [<targetName>] [CMAKE_FLAGS <flags>...] [OUTPUT_VARIABLE <var>])",
      "try_compile(<resultVar> <bindir> <srcfile|SOURCES srcfile...> [CMAKE_FLAGS <flags>...] [COMPILE_DEFINITIONS <defs>...] [LINK_OPTIONS <options>...] [LINK_LIBRARIES <libs>...] [OUTPUT_VARIABLE <var>] [COPY_FILE <fileName> [COPY_FILE_ERROR <var>]] [<LANG>_STANDARD <std>] [<LANG>_STANDARD_REQUIRED <bool>] [<LANG>_EXTENSIONS <bool>])"
    ],
    "keyword": ["CMAKE_FLAGS", "OUTPUT_VARIABLE", "SOURCES", "COMPILE_DEFINITIONS", "LINK_OPTIONS", "LINK_LIBRARIES", "COPY_FILE", "COPY_FILE_ERROR", "LANG", "STANDARD", "STANDARD_REQUIRED", "EXTENSIONS"]
  },
  "try_run": {
    "sig": [
      "try_run(<runResultVar> <compileResultVar> <bindir> <srcfile> [CMAKE_FLAGS <flags>...] [COMPILE_DEFINITIONS <defs>...] [LINK_OPTIONS <options>...] [LINK_LIBRARIES <libs>...] [COMPILE_OUTPUT_VARIABLE <var>] [RUN_OUTPUT_VARIABLE <var>] [OUTPUT_VARIABLE <var>] [WORKING_DIRECTORY <var>] [ARGS <args>...])"
    ],
    "keyword": ["CMAKE_FLAGS", "COMPILE_DEFINITIONS", "LINK_OPTIONS", "LINK_LIBRARIES", "COMPILE_OUTPUT_VARIABLE", "RUN_OUTPUT_VARIABLE", "OUTPUT_VARIABLE", "WORKING_DIRECTORY", "ARGS"]
  },
  "unset": {
    "sig": [
      "unset(<variable> [CACHE | PARENT_SCOPE])",
      "unset(ENV{<variable>})"
    ],
    "keyword": ["CACHE", "PARENT_SCOPE", "ENV"]
  },
  "use_mangled_mesa": {
    "sig": [
      "use_mangled_mesa(PATH_TO_MESA OUTPUT_DIRECTORY)"
    ],
    "deprecated": true,
    "keyword": ["PATH_TO_MESA", "OUTPUT_DIRECTORY"]
  },
  "utility_source": {
    "sig": [
      "utility_source(cache_entry executable_name path_to_source [file1 file2 ...])"
    ],
    "deprecated": true
  },
  "variable_requires": {
    "sig": [
      "variable_requires(TEST_VARIABLE RESULT_VARIABLE REQUIRED_VARIABLE1 REQUIRED_VARIABLE2 ...)"
    ],
    "deprecated": true,
    "keyword": ["TEST_VARIABLE", "RESULT_VARIABLE", "REQUIRED_VARIABLE1", "REQUIRED_VARIABLE2"]
  },
  "variable_watch": {
    "sig": [
      "variable_watch(<variable> [<command>])"
    ]
  },
  "while": {
    "sig": [
      "while(<condition>)",
      "while(<constant>)",
      "while(<variable|string>)",
      "while([NOT] <condition> { <variable> | COMMAND <command-name> | POLICY <policy-id> | TARGET <target_name> | TEST <test-name>})",
      "while(<cond1> AND <cond2>)",
      "while(<cond1> OR <cond2>)",
      "while(DEFINED <name>|CACHE{<name>}|ENV{<name>})",
      "while(<variable|string> IN_LIST <variable>)",
      "while(<variable|string> MATCHES regex)",
      "while(<variable|string> LESS <variable|string>)",
      "while(<variable|string> GREATER <variable|string>)",
      "while(<variable|string> EQUAL <variable|string>)",
      "while(<variable|string> LESS_EQUAL <variable|string>)",
      "while(<variable|string> GREATER_EQUAL <variable|string>)",
      "while(<variable|string> STRLESS <variable|string>)",
      "while(<variable|string> STRGREATER <variable|string>)",
      "while(<variable|string> STREQUAL <variable|string>)",
      "while(<variable|string> STRLESS_EQUAL <variable|string>)",
      "while(<variable|string> STRGREATER_EQUAL <variable|string>)",
      "while(<variable|string> VERSION_LESS <variable|string>)",
      "while(<variable|string> VERSION_GREATER <variable|string>)",
      "while(<variable|string> VERSION_EQUAL <variable|string>)",
      "while(<variable|string> VERSION_LESS_EQUAL <variable|string>)",
      "while(<variable|string> VERSION_GREATER_EQUAL <variable|string>)",
      "while(var1)",
      "while(var2)"
    ],
    "keyword": ["NOT", "COMMAND", "POLICY", "TARGET", "TEST", "AND", "OR", "DEFINED", "CACHE", "ENV", "IN_LIST", "MATCHES", "LESS", "GREATER", "EQUAL", "LESS_EQUAL", "GREATER_EQUAL", "STRLESS", "STRGREATER", "STREQUAL", "STRLESS_EQUAL", "STRGREATER_EQUAL", "VERSION_LESS", "VERSION_GREATER", "VERSION_EQUAL", "VERSION_LESS_EQUAL", "VERSION_GREATER_EQUAL"]
  },
  "write_file": {
    "sig": [
      "write_file(filename \"message to write\"... [APPEND])"
    ],
    "deprecated": true,
    "keyword": ["APPEND"]
  }
}