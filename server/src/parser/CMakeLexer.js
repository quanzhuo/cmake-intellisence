// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from './antlr4/index.js';


const serializedATN = [4,0,30,328,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,
1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,
15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,5,17,211,8,17,10,17,12,
17,214,9,17,1,18,1,18,1,18,1,18,1,19,1,19,5,19,222,8,19,10,19,12,19,225,
9,19,1,19,1,19,1,20,4,20,230,8,20,11,20,12,20,231,1,21,1,21,1,21,1,21,1,
21,1,21,1,21,1,21,1,22,1,22,5,22,244,8,22,10,22,12,22,247,9,22,1,22,1,22,
1,23,3,23,252,8,23,1,23,1,23,1,23,1,23,1,23,1,24,3,24,260,8,24,1,24,1,24,
1,24,1,24,1,24,1,25,1,25,3,25,269,8,25,1,25,1,25,1,26,4,26,274,8,26,11,26,
12,26,275,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,3,29,289,
8,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,3,31,300,8,31,1,32,1,32,
1,32,1,33,1,33,1,33,1,33,1,33,1,33,5,33,311,8,33,10,33,12,33,314,9,33,1,
33,3,33,317,8,33,1,34,1,34,1,34,1,34,3,34,323,8,34,1,35,1,35,3,35,327,8,
35,1,312,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
49,25,51,26,53,27,55,28,57,29,59,30,61,0,63,0,65,0,67,0,69,0,71,0,1,0,7,
3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,2,0,
9,9,32,32,4,0,48,57,59,59,65,90,97,122,2,0,34,34,92,92,6,0,9,10,13,13,32,
32,34,35,40,41,92,92,338,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,73,1,0,0,0,3,76,1,0,0,0,5,
83,1,0,0,0,7,88,1,0,0,0,9,94,1,0,0,0,11,102,1,0,0,0,13,113,1,0,0,0,15,119,
1,0,0,0,17,128,1,0,0,0,19,134,1,0,0,0,21,143,1,0,0,0,23,152,1,0,0,0,25,164,
1,0,0,0,27,170,1,0,0,0,29,179,1,0,0,0,31,183,1,0,0,0,33,191,1,0,0,0,35,208,
1,0,0,0,37,215,1,0,0,0,39,219,1,0,0,0,41,229,1,0,0,0,43,233,1,0,0,0,45,241,
1,0,0,0,47,251,1,0,0,0,49,259,1,0,0,0,51,266,1,0,0,0,53,273,1,0,0,0,55,279,
1,0,0,0,57,282,1,0,0,0,59,288,1,0,0,0,61,290,1,0,0,0,63,299,1,0,0,0,65,301,
1,0,0,0,67,316,1,0,0,0,69,322,1,0,0,0,71,326,1,0,0,0,73,74,5,105,0,0,74,
75,5,102,0,0,75,2,1,0,0,0,76,77,5,101,0,0,77,78,5,108,0,0,78,79,5,115,0,
0,79,80,5,101,0,0,80,81,5,105,0,0,81,82,5,102,0,0,82,4,1,0,0,0,83,84,5,101,
0,0,84,85,5,108,0,0,85,86,5,115,0,0,86,87,5,101,0,0,87,6,1,0,0,0,88,89,5,
101,0,0,89,90,5,110,0,0,90,91,5,100,0,0,91,92,5,105,0,0,92,93,5,102,0,0,
93,8,1,0,0,0,94,95,5,102,0,0,95,96,5,111,0,0,96,97,5,114,0,0,97,98,5,101,
0,0,98,99,5,97,0,0,99,100,5,99,0,0,100,101,5,104,0,0,101,10,1,0,0,0,102,
103,5,101,0,0,103,104,5,110,0,0,104,105,5,100,0,0,105,106,5,102,0,0,106,
107,5,111,0,0,107,108,5,114,0,0,108,109,5,101,0,0,109,110,5,97,0,0,110,111,
5,99,0,0,111,112,5,104,0,0,112,12,1,0,0,0,113,114,5,119,0,0,114,115,5,104,
0,0,115,116,5,105,0,0,116,117,5,108,0,0,117,118,5,101,0,0,118,14,1,0,0,0,
119,120,5,101,0,0,120,121,5,110,0,0,121,122,5,100,0,0,122,123,5,119,0,0,
123,124,5,104,0,0,124,125,5,105,0,0,125,126,5,108,0,0,126,127,5,101,0,0,
127,16,1,0,0,0,128,129,5,98,0,0,129,130,5,114,0,0,130,131,5,101,0,0,131,
132,5,97,0,0,132,133,5,107,0,0,133,18,1,0,0,0,134,135,5,99,0,0,135,136,5,
111,0,0,136,137,5,110,0,0,137,138,5,116,0,0,138,139,5,105,0,0,139,140,5,
110,0,0,140,141,5,117,0,0,141,142,5,101,0,0,142,20,1,0,0,0,143,144,5,102,
0,0,144,145,5,117,0,0,145,146,5,110,0,0,146,147,5,99,0,0,147,148,5,116,0,
0,148,149,5,105,0,0,149,150,5,111,0,0,150,151,5,110,0,0,151,22,1,0,0,0,152,
153,5,101,0,0,153,154,5,110,0,0,154,155,5,100,0,0,155,156,5,102,0,0,156,
157,5,117,0,0,157,158,5,110,0,0,158,159,5,99,0,0,159,160,5,116,0,0,160,161,
5,105,0,0,161,162,5,111,0,0,162,163,5,110,0,0,163,24,1,0,0,0,164,165,5,109,
0,0,165,166,5,97,0,0,166,167,5,99,0,0,167,168,5,114,0,0,168,169,5,111,0,
0,169,26,1,0,0,0,170,171,5,101,0,0,171,172,5,110,0,0,172,173,5,100,0,0,173,
174,5,109,0,0,174,175,5,97,0,0,175,176,5,99,0,0,176,177,5,114,0,0,177,178,
5,111,0,0,178,28,1,0,0,0,179,180,5,115,0,0,180,181,5,101,0,0,181,182,5,116,
0,0,182,30,1,0,0,0,183,184,5,105,0,0,184,185,5,110,0,0,185,186,5,99,0,0,
186,187,5,108,0,0,187,188,5,117,0,0,188,189,5,100,0,0,189,190,5,101,0,0,
190,32,1,0,0,0,191,192,5,97,0,0,192,193,5,100,0,0,193,194,5,100,0,0,194,
195,5,95,0,0,195,196,5,115,0,0,196,197,5,117,0,0,197,198,5,98,0,0,198,199,
5,100,0,0,199,200,5,105,0,0,200,201,5,114,0,0,201,202,5,101,0,0,202,203,
5,99,0,0,203,204,5,116,0,0,204,205,5,111,0,0,205,206,5,114,0,0,206,207,5,
121,0,0,207,34,1,0,0,0,208,212,7,0,0,0,209,211,7,1,0,0,210,209,1,0,0,0,211,
214,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,36,1,0,0,0,214,212,1,0,0,
0,215,216,5,91,0,0,216,217,3,67,33,0,217,218,5,93,0,0,218,38,1,0,0,0,219,
223,5,34,0,0,220,222,3,69,34,0,221,220,1,0,0,0,222,225,1,0,0,0,223,221,1,
0,0,0,223,224,1,0,0,0,224,226,1,0,0,0,225,223,1,0,0,0,226,227,5,34,0,0,227,
40,1,0,0,0,228,230,3,71,35,0,229,228,1,0,0,0,230,231,1,0,0,0,231,229,1,0,
0,0,231,232,1,0,0,0,232,42,1,0,0,0,233,234,5,35,0,0,234,235,5,91,0,0,235,
236,1,0,0,0,236,237,3,67,33,0,237,238,5,93,0,0,238,239,1,0,0,0,239,240,6,
21,0,0,240,44,1,0,0,0,241,245,5,35,0,0,242,244,8,2,0,0,243,242,1,0,0,0,244,
247,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,248,1,0,0,0,247,245,1,0,
0,0,248,249,6,22,0,0,249,46,1,0,0,0,250,252,5,13,0,0,251,250,1,0,0,0,251,
252,1,0,0,0,252,253,1,0,0,0,253,254,5,10,0,0,254,255,4,23,0,0,255,256,1,
0,0,0,256,257,6,23,1,0,257,48,1,0,0,0,258,260,5,13,0,0,259,258,1,0,0,0,259,
260,1,0,0,0,260,261,1,0,0,0,261,262,5,10,0,0,262,263,4,24,1,0,263,264,1,
0,0,0,264,265,6,24,1,0,265,50,1,0,0,0,266,268,6,25,2,0,267,269,5,13,0,0,
268,267,1,0,0,0,268,269,1,0,0,0,269,270,1,0,0,0,270,271,5,10,0,0,271,52,
1,0,0,0,272,274,7,3,0,0,273,272,1,0,0,0,274,275,1,0,0,0,275,273,1,0,0,0,
275,276,1,0,0,0,276,277,1,0,0,0,277,278,6,26,1,0,278,54,1,0,0,0,279,280,
5,40,0,0,280,281,6,27,3,0,281,56,1,0,0,0,282,283,5,41,0,0,283,284,6,28,4,
0,284,58,1,0,0,0,285,289,3,61,30,0,286,289,3,63,31,0,287,289,3,65,32,0,288,
285,1,0,0,0,288,286,1,0,0,0,288,287,1,0,0,0,289,60,1,0,0,0,290,291,5,92,
0,0,291,292,8,4,0,0,292,62,1,0,0,0,293,294,5,92,0,0,294,300,5,116,0,0,295,
296,5,92,0,0,296,300,5,114,0,0,297,298,5,92,0,0,298,300,5,110,0,0,299,293,
1,0,0,0,299,295,1,0,0,0,299,297,1,0,0,0,300,64,1,0,0,0,301,302,5,92,0,0,
302,303,5,59,0,0,303,66,1,0,0,0,304,305,5,61,0,0,305,306,3,67,33,0,306,307,
5,61,0,0,307,317,1,0,0,0,308,312,5,91,0,0,309,311,9,0,0,0,310,309,1,0,0,
0,311,314,1,0,0,0,312,313,1,0,0,0,312,310,1,0,0,0,313,315,1,0,0,0,314,312,
1,0,0,0,315,317,5,93,0,0,316,304,1,0,0,0,316,308,1,0,0,0,317,68,1,0,0,0,
318,323,8,5,0,0,319,323,3,59,29,0,320,321,5,92,0,0,321,323,3,51,25,0,322,
318,1,0,0,0,322,319,1,0,0,0,322,320,1,0,0,0,323,70,1,0,0,0,324,327,8,6,0,
0,325,327,3,59,29,0,326,324,1,0,0,0,326,325,1,0,0,0,327,72,1,0,0,0,15,0,
212,223,231,245,251,259,268,275,288,299,312,316,322,326,5,0,1,0,6,0,0,1,
25,0,1,27,1,1,28,2];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CMakeLexer extends antlr4.Lexer {

    static grammarFileName = "CMake.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'if'", "'elseif'", "'else'", "'endif'", 
                         "'foreach'", "'endforeach'", "'while'", "'endwhile'", 
                         "'break'", "'continue'", "'function'", "'endfunction'", 
                         "'macro'", "'endmacro'", "'set'", "'include'", 
                         "'add_subdirectory'", null, null, null, null, null, 
                         null, null, null, null, null, "'('", "')'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, "ID", "BracketArgument", "QuotedArgument", 
                          "UnquotedArgument", "BracketComment", "LineComment", 
                          "IgnoreNLBetweenArgs", "IgnoreExtraNLBetweenCmds", 
                          "NL", "WS", "LParen", "RParen", "Escape" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "T__14", "T__15", "T__16", "ID", "BracketArgument", 
                      "QuotedArgument", "UnquotedArgument", "BracketComment", 
                      "LineComment", "IgnoreNLBetweenArgs", "IgnoreExtraNLBetweenCmds", 
                      "NL", "WS", "LParen", "RParen", "Escape", "EscapeIdentity", 
                      "EscapeEncoded", "EscapeSemi", "BracketNested", "QuotedElement", 
                      "UnquotedElement" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());

            this.nesting = 0;
            this.newLineCount = 1;

    }

    get atn() {
        return atn;
    }
}

CMakeLexer.EOF = antlr4.Token.EOF;
CMakeLexer.T__0 = 1;
CMakeLexer.T__1 = 2;
CMakeLexer.T__2 = 3;
CMakeLexer.T__3 = 4;
CMakeLexer.T__4 = 5;
CMakeLexer.T__5 = 6;
CMakeLexer.T__6 = 7;
CMakeLexer.T__7 = 8;
CMakeLexer.T__8 = 9;
CMakeLexer.T__9 = 10;
CMakeLexer.T__10 = 11;
CMakeLexer.T__11 = 12;
CMakeLexer.T__12 = 13;
CMakeLexer.T__13 = 14;
CMakeLexer.T__14 = 15;
CMakeLexer.T__15 = 16;
CMakeLexer.T__16 = 17;
CMakeLexer.ID = 18;
CMakeLexer.BracketArgument = 19;
CMakeLexer.QuotedArgument = 20;
CMakeLexer.UnquotedArgument = 21;
CMakeLexer.BracketComment = 22;
CMakeLexer.LineComment = 23;
CMakeLexer.IgnoreNLBetweenArgs = 24;
CMakeLexer.IgnoreExtraNLBetweenCmds = 25;
CMakeLexer.NL = 26;
CMakeLexer.WS = 27;
CMakeLexer.LParen = 28;
CMakeLexer.RParen = 29;
CMakeLexer.Escape = 30;

CMakeLexer.prototype.action = function(localctx, ruleIndex, actionIndex) {
	switch (ruleIndex) {
	case 25:
		this.NL_action(localctx, actionIndex);
		break;
	case 27:
		this.LParen_action(localctx, actionIndex);
		break;
	case 28:
		this.RParen_action(localctx, actionIndex);
		break;
	default:
		throw "No registered action for:" + ruleIndex;
	}
};


CMakeLexer.prototype.NL_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 0:
		this.newLineCount++;
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

CMakeLexer.prototype.LParen_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 1:
		this.nesting++;
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

CMakeLexer.prototype.RParen_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 2:
		this.nesting--; this.newLineCount = 0;
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};
CMakeLexer.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch (ruleIndex) {
		case 23:
			return this.IgnoreNLBetweenArgs_sempred(localctx, predIndex);
		case 24:
			return this.IgnoreExtraNLBetweenCmds_sempred(localctx, predIndex);
    	default:
    		throw "No registered predicate for:" + ruleIndex;
    }
};

CMakeLexer.prototype.IgnoreNLBetweenArgs_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return  this.nesting > 0 ;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CMakeLexer.prototype.IgnoreExtraNLBetweenCmds_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return  this.newLineCount > 0 ;
		default:
			throw "No predicate with index:" + predIndex;
	}
};




